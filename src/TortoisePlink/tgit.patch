Patch from original putty 0.63 to tgitplink (excluded all deleted files)
based on https://github.com/csware/putty

diff --git a/LoginDialog.cpp b/LoginDialog.cpp
new file mode 100644
index 0000000..488e4e7
--- /dev/null
+++ b/LoginDialog.cpp
@@ -0,0 +1,163 @@
+// TortoiseSVN - a Windows shell extension for easy version control
+
+// Copyright (C) 2003, 2013 - TortoiseSVN
+
+// This program is free software; you can redistribute it and/or
+// modify it under the terms of the GNU General Public License
+// as published by the Free Software Foundation; either version 2
+// of the License, or (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+#include "LoginDialog.h"
+#include "TortoisePlinkRes.h"
+#include <string>
+
+HINSTANCE g_hmodThisDll;
+HWND g_hwndMain;
+
+class LoginDialog
+{
+public:
+   LoginDialog(const std::string& prompt);
+
+   static bool DoLoginDialog(std::string& password, const std::string& prompt);
+
+private:
+   bool myOK;
+   HWND _hdlg;
+
+   std::string  myPassword;
+   std::string  myPrompt;
+
+   void CreateModule(void);
+   void RetrieveValues();
+
+   std::string GetPassword();
+
+   friend BOOL CALLBACK LoginDialogProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam);
+};
+
+
+BOOL DoLoginDialog(char* password, int maxlen, const char* prompt)
+{
+   g_hmodThisDll = GetModuleHandle(0);
+   g_hwndMain = GetParentHwnd();
+   std::string passwordstr;
+   BOOL res = LoginDialog::DoLoginDialog(passwordstr, prompt);
+   if (res)
+      strncpy(password, passwordstr.c_str(), maxlen);
+   return res;
+}
+
+
+BOOL CALLBACK LoginDialogProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)
+{
+   if (uMsg == WM_INITDIALOG)
+   {
+      LoginDialog* pDlg = (LoginDialog*) lParam;
+      pDlg->_hdlg = hwndDlg;
+      SetWindowLongPtr(hwndDlg, GWLP_USERDATA, lParam);
+      // Set prompt text
+      SendDlgItemMessage(hwndDlg, IDC_LOGIN_PROMPT, WM_SETTEXT,
+                         pDlg->myPrompt.length(), (LPARAM) pDlg->myPrompt.c_str());
+      // Make sure edit control has the focus
+      //SendDlgItemMessage(hwndDlg, IDC_LOGIN_PASSWORD, WM_SETFOCUS, 0, 0);
+      if (GetDlgCtrlID((HWND) wParam) != IDC_LOGIN_PASSWORD)
+      {
+         SetFocus(GetDlgItem(hwndDlg, IDC_LOGIN_PASSWORD));
+         return FALSE;
+      }
+      return TRUE;
+   }
+   else if (uMsg == WM_COMMAND && LOWORD(wParam) == IDCANCEL && HIWORD(wParam) == BN_CLICKED)
+   {
+      LoginDialog* pDlg = (LoginDialog*) GetWindowLongPtr(hwndDlg, GWLP_USERDATA);
+      pDlg->myOK = false;
+      EndDialog(hwndDlg, IDCANCEL);
+      return 1;
+   }
+   else if (uMsg == WM_COMMAND && LOWORD(wParam) == IDOK && HIWORD(wParam) == BN_CLICKED)
+   {
+      LoginDialog* pDlg = (LoginDialog*) GetWindowLongPtr(hwndDlg, GWLP_USERDATA);
+      pDlg->myOK = true;
+      pDlg->RetrieveValues();
+      EndDialog(hwndDlg, IDOK);
+      return 1;
+   }
+   return 0;
+}
+
+LoginDialog::LoginDialog(const std::string& prompt)
+{
+   myPrompt = prompt;
+}
+
+void LoginDialog::CreateModule(void)
+{
+   DialogBoxParam(g_hmodThisDll, MAKEINTRESOURCE(IDD_LOGIN), g_hwndMain,
+                  (DLGPROC)(LoginDialogProc), (LPARAM)this);
+}
+
+
+bool LoginDialog::DoLoginDialog(std::string& password, const std::string& prompt)
+{
+   LoginDialog *pDlg = new LoginDialog(prompt);
+
+   pDlg->CreateModule();
+
+   bool ret = pDlg->myOK;
+   password = pDlg->myPassword;
+
+   delete pDlg;
+
+   return ret;
+}
+
+
+std::string LoginDialog::GetPassword()
+{
+   char szTxt[256];
+   SendDlgItemMessage(_hdlg, IDC_LOGIN_PASSWORD, WM_GETTEXT, sizeof(szTxt), (LPARAM)szTxt);
+   std::string strText = szTxt;
+   return strText;
+}
+
+void LoginDialog::RetrieveValues()
+{
+   myPassword = GetPassword();
+}
+
+
+BOOL IsWinNT()
+{
+   OSVERSIONINFO vi;
+   vi.dwOSVersionInfoSize = sizeof(vi);
+   if (GetVersionEx(&vi))
+   {
+      if (vi.dwPlatformId == VER_PLATFORM_WIN32_NT)
+      {
+         return TRUE;
+      }
+   }
+   return FALSE;
+}
+
+HWND GetParentHwnd()
+{
+   if (IsWinNT())
+   {
+      return GetDesktopWindow();
+   }
+   else
+   {
+      return GetForegroundWindow();
+   }
+}
diff --git a/LoginDialog.h b/LoginDialog.h
new file mode 100644
index 0000000..14dfac7
--- /dev/null
+++ b/LoginDialog.h
@@ -0,0 +1,36 @@
+// TortoiseCVS - a Windows shell extension for easy version control
+
+// Copyright (C) 2000 - Francis Irving
+// <francis@flourish.org> - May 2000
+
+// This program is free software; you can redistribute it and/or
+// modify it under the terms of the GNU General Public License
+// as published by the Free Software Foundation; either version 2
+// of the License, or (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+#ifndef LOGIN_DIALOG_H
+#define LOGIN_DIALOG_H
+
+#include <windows.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+BOOL DoLoginDialog(char* password, int maxlen, const char* prompt);
+
+HWND GetParentHwnd();
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff --git a/windows/MSVC/Plink/TortoisePlink.vcxproj b/windows/MSVC/Plink/TortoisePlink.vcxproj
new file mode 100644
index 0000000..0ac464d
--- /dev/null
+++ b/windows/MSVC/Plink/TortoisePlink.vcxproj
@@ -0,0 +1,148 @@
+?<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Debug|Win32">
+      <Configuration>Debug</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Debug|x64">
+      <Configuration>Debug</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|Win32">
+      <Configuration>Release</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectName>TortoiseGitPlink</ProjectName>
+    <ProjectGuid>{D3AFBFBE-5501-4077-B3B4-3D28BBCA8F20}</ProjectGuid>
+    <RootNamespace>plink</RootNamespace>
+  </PropertyGroup>
+  <Import Project="$(SolutionDir)TortoiseGit.toolset.props" />
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Label="Configuration">
+    <ConfigurationType>Application</ConfigurationType>
+    <CharacterSet>MultiByte</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)'=='Release'" Label="Configuration">
+    <WholeProgramOptimization>true</WholeProgramOptimization>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  <Import Project="$(SolutionDir)TortoiseGit.common.props" />
+  <PropertyGroup Label="UserMacros" />
+  <ItemDefinitionGroup>
+    <ClCompile>
+      <AdditionalIncludeDirectories>..\..\..\;..\..\..\charset\;..\..\..\windows\;..\..\..\unix\;..\..\..\mac\;..\..\..\macosx\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;_CRT_SECURE_NO_DEPRECATE;SECURITY_WIN32;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <WarningLevel>TurnOffAllWarnings</WarningLevel>
+      <DisableSpecificWarnings>4996;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <PrecompiledHeader>NotUsing</PrecompiledHeader>
+    </ClCompile>
+    <Link>
+      <AdditionalDependencies>comctl32.lib;imm32.lib;winmm.lib;%(AdditionalDependencies)</AdditionalDependencies>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)'=='Debug'">
+    <ClCompile>
+      <SDLCheck>false</SDLCheck>
+    </ClCompile>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\..\..\be_all_s.c" />
+    <ClCompile Include="..\..\..\cmdline.c" />
+    <ClCompile Include="..\..\..\conf.c" />
+    <ClCompile Include="..\..\..\cproxy.c" />
+    <ClCompile Include="..\..\..\ldisc.c" />
+    <ClCompile Include="..\..\..\logging.c" />
+    <ClCompile Include="..\..\..\logindialog.cpp" />
+    <ClCompile Include="..\..\..\misc.c" />
+    <ClCompile Include="..\..\..\pgssapi.c" />
+    <ClCompile Include="..\..\..\pinger.c" />
+    <ClCompile Include="..\..\..\portfwd.c" />
+    <ClCompile Include="..\..\..\proxy.c" />
+    <ClCompile Include="..\..\..\raw.c" />
+    <ClCompile Include="..\..\..\rlogin.c" />
+    <ClCompile Include="..\..\..\settings.c" />
+    <ClCompile Include="..\..\..\ssh.c">
+      <DebugInformationFormat Condition="'$(Configuration)'=='Debug'">ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshaes.c" />
+    <ClCompile Include="..\..\..\ssharcf.c" />
+    <ClCompile Include="..\..\..\sshblowf.c" />
+    <ClCompile Include="..\..\..\sshbn.c" />
+    <ClCompile Include="..\..\..\sshcrc.c" />
+    <ClCompile Include="..\..\..\sshcrcda.c" />
+    <ClCompile Include="..\..\..\sshdes.c" />
+    <ClCompile Include="..\..\..\sshdh.c" />
+    <ClCompile Include="..\..\..\sshdss.c" />
+    <ClCompile Include="..\..\..\sshdssg.c" />
+    <ClCompile Include="..\..\..\sshgssc.c" />
+    <ClCompile Include="..\..\..\sshmd5.c" />
+    <ClCompile Include="..\..\..\sshprime.c" />
+    <ClCompile Include="..\..\..\sshpubk.c" />
+    <ClCompile Include="..\..\..\sshrand.c" />
+    <ClCompile Include="..\..\..\sshrsa.c" />
+    <ClCompile Include="..\..\..\sshrsag.c" />
+    <ClCompile Include="..\..\..\sshsh256.c" />
+    <ClCompile Include="..\..\..\sshsh512.c" />
+    <ClCompile Include="..\..\..\sshsha.c" />
+    <ClCompile Include="..\..\..\sshzlib.c" />
+    <ClCompile Include="..\..\..\telnet.c" />
+    <ClCompile Include="..\..\..\timing.c" />
+    <ClCompile Include="..\..\..\tree234.c" />
+    <ClCompile Include="..\..\..\version.c" />
+    <ClCompile Include="..\..\..\wildcard.c" />
+    <ClCompile Include="..\..\wincons.c" />
+    <ClCompile Include="..\..\windefs.c" />
+    <ClCompile Include="..\..\wingss.c" />
+    <ClCompile Include="..\..\winhandl.c" />
+    <ClCompile Include="..\..\winjump.c" />
+    <ClCompile Include="..\..\winmisc.c" />
+    <ClCompile Include="..\..\winnet.c" />
+    <ClCompile Include="..\..\winnoise.c" />
+    <ClCompile Include="..\..\winpgntc.c" />
+    <ClCompile Include="..\..\winplink.c" />
+    <ClCompile Include="..\..\winproxy.c" />
+    <ClCompile Include="..\..\winser.c" />
+    <ClCompile Include="..\..\winstore.c" />
+    <ClCompile Include="..\..\wintime.c" />
+    <ClCompile Include="..\..\..\x11fwd.c" />
+    <ClCompile Include="..\..\winx11.c" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\..\charset\charset.h" />
+    <ClInclude Include="..\..\..\int64.h" />
+    <ClInclude Include="..\..\..\ldisc.h" />
+    <ClInclude Include="..\..\..\logindialog.h" />
+    <ClInclude Include="..\..\..\misc.h" />
+    <ClInclude Include="..\..\..\network.h" />
+    <ClInclude Include="..\..\..\pgssapi.h" />
+    <ClInclude Include="..\..\..\proxy.h" />
+    <ClInclude Include="..\..\..\putty.h" />
+    <ClInclude Include="..\..\..\puttymem.h" />
+    <ClInclude Include="..\..\..\puttyps.h" />
+    <ClInclude Include="..\..\..\sshgss.h" />
+    <ClInclude Include="..\..\..\sshgssc.h" />
+    <ClInclude Include="..\..\..\ssh.h" />
+    <ClInclude Include="..\..\..\storage.h" />
+    <ClInclude Include="..\..\..\terminal.h" />
+    <ClInclude Include="..\..\..\tree234.h" />
+    <ClInclude Include="..\..\winhelp.h" />
+    <ClInclude Include="..\..\winstuff.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <Image Include="..\..\PUTTY.ICO" />
+  </ItemGroup>
+  <ItemGroup>
+    <ResourceCompile Include="..\..\TortoisePlink.rc" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/windows/MSVC/Plink/TortoisePlink.vcxproj.filters b/windows/MSVC/Plink/TortoisePlink.vcxproj.filters
new file mode 100644
index 0000000..decabde
--- /dev/null
+++ b/windows/MSVC/Plink/TortoisePlink.vcxproj.filters
@@ -0,0 +1,261 @@
+?<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Source Files">
+      <UniqueIdentifier>{b5179102-c864-4550-8c1c-24f90dc5bd30}</UniqueIdentifier>
+      <Extensions>cpp;c;cxx;rc;def;r;odl;idl;hpj;bat</Extensions>
+    </Filter>
+    <Filter Include="Header Files">
+      <UniqueIdentifier>{f70f5e40-e03d-4e8a-9dfe-1665a6d6a8dd}</UniqueIdentifier>
+      <Extensions>h;hpp;hxx;hm;inl</Extensions>
+    </Filter>
+    <Filter Include="Resource Files">
+      <UniqueIdentifier>{0b632b08-0613-4f8b-b439-67ea21485970}</UniqueIdentifier>
+      <Extensions>ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe</Extensions>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\..\..\be_all_s.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\cmdline.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\cproxy.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\ldisc.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\logging.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\logindialog.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\misc.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\pinger.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\portfwd.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\proxy.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\raw.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\rlogin.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\settings.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\ssh.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshaes.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\ssharcf.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshblowf.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshbn.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshcrc.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshcrcda.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshdes.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshdh.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshdss.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshmd5.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshpubk.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshrand.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshrsa.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshsh256.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshsh512.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshsha.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshzlib.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\telnet.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\timing.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\tree234.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\version.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\wildcard.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\wincons.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\windefs.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\winhandl.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\winmisc.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\winnet.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\winnoise.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\winpgntc.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\winplink.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\winproxy.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\winser.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\winstore.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\wintime.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\x11fwd.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\wingss.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\winjump.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\winx11.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\pgssapi.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshgssc.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshprime.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshdssg.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\sshrsag.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\conf.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\..\charset\charset.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\int64.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\ldisc.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\logindialog.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\misc.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\network.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\proxy.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\putty.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\puttymem.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\puttyps.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\ssh.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\storage.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\terminal.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\tree234.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\winhelp.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\winstuff.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\pgssapi.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\sshgss.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\sshgssc.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+  </ItemGroup>
+  <ItemGroup>
+    <Image Include="..\..\PUTTY.ICO">
+      <Filter>Resource Files</Filter>
+    </Image>
+  </ItemGroup>
+  <ItemGroup>
+    <ResourceCompile Include="..\..\TortoisePlink.rc">
+      <Filter>Resource Files</Filter>
+    </ResourceCompile>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/windows/TortoisePlink.aps b/windows/TortoisePlink.aps
new file mode 100644
index 0000000..a870c71
Binary files /dev/null and b/windows/TortoisePlink.aps differ
diff --git a/windows/TortoisePlink.rc b/windows/TortoisePlink.rc
new file mode 100644
index 0000000..06f2944
--- /dev/null
+++ b/windows/TortoisePlink.rc
@@ -0,0 +1,123 @@
+// Microsoft Visual C++ generated resource script.
+//
+#include "TortoisePlinkRes.h"
+
+#define APSTUDIO_READONLY_SYMBOLS
+/////////////////////////////////////////////////////////////////////////////
+//
+// Generated from the TEXTINCLUDE 2 resource.
+//
+#include "afxres.h"
+
+/////////////////////////////////////////////////////////////////////////////
+#undef APSTUDIO_READONLY_SYMBOLS
+
+/////////////////////////////////////////////////////////////////////////////
+// German (Switzerland) resources
+
+#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_DES)
+#ifdef _WIN32
+LANGUAGE LANG_GERMAN, SUBLANG_GERMAN_SWISS
+#pragma code_page(1252)
+#endif //_WIN32
+
+/////////////////////////////////////////////////////////////////////////////
+//
+// Icon
+//
+
+// Icon with lowest ID value placed first to ensure application icon
+// remains consistent on all systems.
+200                     ICON                    "putty.ico"
+
+/////////////////////////////////////////////////////////////////////////////
+//
+// Dialog
+//
+
+IDD_LOGIN DIALOG  0, 0, 200, 70
+STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_POPUP | WS_VISIBLE | WS_CAPTION | WS_SYSMENU
+CAPTION "TortoiseGitPlink"
+FONT 8, "MS Sans Serif"
+BEGIN
+    DEFPUSHBUTTON   "OK",IDOK,40,50,50,14
+    PUSHBUTTON      "Cancel",IDCANCEL,100,50,50,14
+    LTEXT           "Password",IDC_LOGIN_PROMPT,7,7,190,8
+    EDITTEXT        IDC_LOGIN_PASSWORD,7,26,185,14,ES_PASSWORD | ES_AUTOHSCROLL
+END
+
+
+/////////////////////////////////////////////////////////////////////////////
+//
+// Version
+//
+
+VS_VERSION_INFO VERSIONINFO
+ FILEVERSION 0,63,0,9999
+ PRODUCTVERSION 0,63,0,9999
+ FILEFLAGSMASK VS_FFI_FILEFLAGSMASK
+#ifdef _DEBUG
+ FILEFLAGS VS_FF_DEBUG
+#else
+ FILEFLAGS 0x0L
+#endif
+ FILEOS VOS_NT_WINDOWS32
+ FILETYPE VFT_APP
+ FILESUBTYPE VFT2_UNKNOWN
+BEGIN
+    BLOCK "StringFileInfo"
+    BEGIN
+        BLOCK "080904b0"
+        BEGIN
+            VALUE "Comments", "Adapted from PuTTY plink (http://www.chiark.greenend.org.uk/~sgtatham/putty/)"
+            VALUE "CompanyName", "TortoiseGit team and TortoiseSVN team"
+            VALUE "FileDescription", "TortoiseGitPlink"
+            VALUE "FileVersion", "Release 0.63"
+            VALUE "InternalName", "TortoiseGitPlink"
+            VALUE "LegalCopyright", "Copyright (C) 2003-2014"
+            VALUE "OriginalFilename", "TortoiseGitPlink.exe"
+            VALUE "ProductName", "TortoiseGit TortoiseGitPlink"
+            VALUE "ProductVersion", "Release 0.63"
+        END
+    END
+    BLOCK "VarFileInfo"
+    BEGIN
+        VALUE "Translation", 0x809, 1200
+    END
+END
+
+
+#ifdef APSTUDIO_INVOKED
+/////////////////////////////////////////////////////////////////////////////
+//
+// TEXTINCLUDE
+//
+
+1 TEXTINCLUDE 
+BEGIN
+    "resource.\0"
+END
+
+
+3 TEXTINCLUDE 
+BEGIN
+    "\r\0"
+END
+
+#endif    // APSTUDIO_INVOKED
+
+#endif    // German (Switzerland) resources
+/////////////////////////////////////////////////////////////////////////////
+
+
+
+#ifndef APSTUDIO_INVOKED
+/////////////////////////////////////////////////////////////////////////////
+//
+// Generated from the TEXTINCLUDE 3 resource.
+//
+
+
+/////////////////////////////////////////////////////////////////////////////
+#endif    // not APSTUDIO_INVOKED
+
diff --git a/windows/TortoisePlinkRes.h b/windows/TortoisePlinkRes.h
new file mode 100644
index 0000000..01fef18
--- /dev/null
+++ b/windows/TortoisePlinkRes.h
@@ -0,0 +1,3 @@
+#define IDD_LOGIN                       101
+#define IDC_LOGIN_PASSWORD              1000
+#define IDC_LOGIN_PROMPT                1001
diff --git a/be_all_s.c b/be_all_s.c
index 0ffd073..7a63f10 100644
--- a/be_all_s.c
+++ b/be_all_s.c
@@ -14,7 +14,7 @@
  * have tiny little source modules containing nothing but
  * declarations of appname, for as long as I can...
  */
-const char *const appname = "PuTTY";
+const char *const appname = "TortoiseGitPlink";
 
 #ifdef TELNET_DEFAULT
 const int be_default_protocol = PROT_TELNET;
diff --git a/cmdline.c b/cmdline.c
index a4c9160..b37d266 100644
--- a/cmdline.c
+++ b/cmdline.c
@@ -348,7 +348,7 @@ int cmdline_process_param(char *p, char *value, int need_save, Conf *conf)
 	conf_set_int(conf, CONF_nopty, TRUE);   /* command => no terminal */
 	sfree(command);
     }
-    if (!strcmp(p, "-P")) {
+    if ((!strcmp(p, "-P"))||(!strcmp(p, "-p"))) {
 	RETURN(2);
 	UNAVAILABLE_IN(TOOLTYPE_NONNETWORK);
 	SAVEABLE(1);		       /* lower priority than -ssh,-telnet */
diff --git a/windows/wincons.c b/windows/wincons.c
index 508be3f..6ee6c2d 100644
--- a/windows/wincons.c
+++ b/windows/wincons.c
@@ -11,6 +11,8 @@
 #include "storage.h"
 #include "ssh.h"
 
+#include "LoginDialog.h"
+
 int console_batch_mode = FALSE;
 
 static void *console_logctx = NULL;
@@ -50,8 +52,6 @@ int verify_ssh_host_key(void *frontend, char *host, int port, char *keytype,
                         void (*callback)(void *ctx, int result), void *ctx)
 {
     int ret;
-    HANDLE hin;
-    DWORD savemode, i;
 
     static const char absentmsg_batch[] =
 	"The server's host key is not cached in the registry. You\n"
@@ -66,13 +66,12 @@ int verify_ssh_host_key(void *frontend, char *host, int port, char *keytype,
 	"think it is.\n"
 	"The server's %s key fingerprint is:\n"
 	"%s\n"
-	"If you trust this host, enter \"y\" to add the key to\n"
+	"If you trust this host, hit Yes to add the key to\n"
 	"PuTTY's cache and carry on connecting.\n"
 	"If you want to carry on connecting just once, without\n"
-	"adding the key to the cache, enter \"n\".\n"
-	"If you do not trust this host, press Return to abandon the\n"
-	"connection.\n"
-	"Store key in cache? (y/n) ";
+	"adding the key to the cache, hit No.\n"
+	"If you do not trust this host, hit Cancel to abandon the\n"
+	"connection.\n";
 
     static const char wrongmsg_batch[] =
 	"WARNING - POTENTIAL SECURITY BREACH!\n"
@@ -86,6 +85,7 @@ int verify_ssh_host_key(void *frontend, char *host, int port, char *keytype,
 	"Connection abandoned.\n";
     static const char wrongmsg[] =
 	"WARNING - POTENTIAL SECURITY BREACH!\n"
+	"\n"
 	"The server's host key does not match the one PuTTY has\n"
 	"cached in the registry. This means that either the\n"
 	"server administrator has changed the host key, or you\n"
@@ -94,17 +94,15 @@ int verify_ssh_host_key(void *frontend, char *host, int port, char *keytype,
 	"The new %s key fingerprint is:\n"
 	"%s\n"
 	"If you were expecting this change and trust the new key,\n"
-	"enter \"y\" to update PuTTY's cache and continue connecting.\n"
+	"hit Yes to update PuTTY's cache and continue connecting.\n"
 	"If you want to carry on connecting but without updating\n"
-	"the cache, enter \"n\".\n"
-	"If you want to abandon the connection completely, press\n"
-	"Return to cancel. Pressing Return is the ONLY guaranteed\n"
-	"safe choice.\n"
-	"Update cached key? (y/n, Return cancels connection) ";
+	"the cache, hit No.\n"
+	"If you want to abandon the connection completely, hit\n"
+	"Cancel. Hitting Cancel is the ONLY guaranteed safe\n" "choice.\n";
 
     static const char abandoned[] = "Connection abandoned.\n";
 
-    char line[32];
+	static const char mbtitle[] = "%s Security Alert";
 
     /*
      * Verify the key against the registry.
@@ -115,37 +113,49 @@ int verify_ssh_host_key(void *frontend, char *host, int port, char *keytype,
 	return 1;
 
     if (ret == 2) {		       /* key was different */
-	if (console_batch_mode) {
-	    fprintf(stderr, wrongmsg_batch, keytype, fingerprint);
-            return 0;
+	int mbret;
+	char *message, *title;
+
+	message = dupprintf(wrongmsg, keytype, fingerprint);
+	title = dupprintf(mbtitle, appname);
+
+	mbret = MessageBox(GetParentHwnd(), message, title, MB_ICONWARNING | MB_YESNOCANCEL | MB_DEFBUTTON3);
+	sfree(message);
+	sfree(title);
+	if (mbret == IDYES) {
+		store_host_key(host, port, keytype, keystr);
+		return 1;
 	}
-	fprintf(stderr, wrongmsg, keytype, fingerprint);
-	fflush(stderr);
-    }
-    if (ret == 1) {		       /* key was absent */
-	if (console_batch_mode) {
-	    fprintf(stderr, absentmsg_batch, keytype, fingerprint);
-            return 0;
+	else if (mbret == IDNO) 
+	{
+		return 1;
+	}
+	else
+		return 0;
 	}
-	fprintf(stderr, absentmsg, keytype, fingerprint);
-	fflush(stderr);
-    }
-
-    hin = GetStdHandle(STD_INPUT_HANDLE);
-    GetConsoleMode(hin, &savemode);
-    SetConsoleMode(hin, (savemode | ENABLE_ECHO_INPUT |
-			 ENABLE_PROCESSED_INPUT | ENABLE_LINE_INPUT));
-    ReadFile(hin, line, sizeof(line) - 1, &i, NULL);
-    SetConsoleMode(hin, savemode);
 
-    if (line[0] != '\0' && line[0] != '\r' && line[0] != '\n') {
-	if (line[0] == 'y' || line[0] == 'Y')
-	    store_host_key(host, port, keytype, keystr);
-        return 1;
-    } else {
-	fprintf(stderr, abandoned);
-        return 0;
+    if (ret == 1) {		       /* key was absent */
+	int mbret;
+	char *message, *title;
+	message = dupprintf(absentmsg, keytype, fingerprint);
+	title = dupprintf(mbtitle, appname);
+	mbret = MessageBox(GetParentHwnd(), message, title,
+		MB_ICONWARNING | MB_ICONWARNING | MB_YESNOCANCEL | MB_DEFBUTTON3);
+	sfree(message);
+	sfree(title);
+	if (mbret == IDYES)
+	{
+		store_host_key(host, port, keytype, keystr);
+		return 1;
+	}
+	else if (mbret == IDNO)
+	{
+		return 1;
+	}
+	else
+		return 0;
     }
+	return 1;
 }
 
 void update_specials_menu(void *frontend)
@@ -159,42 +169,26 @@ void update_specials_menu(void *frontend)
 int askalg(void *frontend, const char *algtype, const char *algname,
 	   void (*callback)(void *ctx, int result), void *ctx)
 {
-    HANDLE hin;
-    DWORD savemode, i;
-
     static const char msg[] =
 	"The first %s supported by the server is\n"
 	"%s, which is below the configured warning threshold.\n"
 	"Continue with connection? (y/n) ";
-    static const char msg_batch[] =
-	"The first %s supported by the server is\n"
-	"%s, which is below the configured warning threshold.\n"
-	"Connection abandoned.\n";
-    static const char abandoned[] = "Connection abandoned.\n";
 
-    char line[32];
+	static const char mbtitle[] = "%s Security Alert";
 
-    if (console_batch_mode) {
-	fprintf(stderr, msg_batch, algtype, algname);
-	return 0;
-    }
+	int mbret;
+	char *message, *title;
 
-    fprintf(stderr, msg, algtype, algname);
-    fflush(stderr);
+	message = dupprintf(msg, algtype, algname);
+	title = dupprintf(mbtitle, appname);
 
-    hin = GetStdHandle(STD_INPUT_HANDLE);
-    GetConsoleMode(hin, &savemode);
-    SetConsoleMode(hin, (savemode | ENABLE_ECHO_INPUT |
-			 ENABLE_PROCESSED_INPUT | ENABLE_LINE_INPUT));
-    ReadFile(hin, line, sizeof(line) - 1, &i, NULL);
-    SetConsoleMode(hin, savemode);
-
-    if (line[0] == 'y' || line[0] == 'Y') {
-	return 1;
-    } else {
-	fprintf(stderr, abandoned);
-	return 0;
-    }
+	mbret = MessageBox(GetParentHwnd(), message, title, MB_ICONWARNING|MB_YESNO);
+	sfree(message);
+	sfree(title);
+	if (mbret == IDYES)
+		return 1;
+	else
+		return 0;
 }
 
 /*
@@ -306,7 +300,6 @@ static void console_data_untrusted(HANDLE hout, const char *data, int len)
 
 int console_get_userpass_input(prompts_t *p, unsigned char *in, int inlen)
 {
-    HANDLE hin, hout;
     size_t curr_prompt;
 
     /*
@@ -318,105 +311,19 @@ int console_get_userpass_input(prompts_t *p, unsigned char *in, int inlen)
             prompt_set_result(p->prompts[i], "");
     }
 
-    /*
-     * The prompts_t might contain a message to be displayed but no
-     * actual prompt. More usually, though, it will contain
-     * questions that the user needs to answer, in which case we
-     * need to ensure that we're able to get the answers.
-     */
-    if (p->n_prompts) {
-	if (console_batch_mode)
-	    return 0;
-	hin = GetStdHandle(STD_INPUT_HANDLE);
-	if (hin == INVALID_HANDLE_VALUE) {
-	    fprintf(stderr, "Cannot get standard input handle\n");
-	    cleanup_exit(1);
-	}
-    }
-
-    /*
-     * And if we have anything to print, we need standard output.
-     */
-    if ((p->name_reqd && p->name) || p->instruction || p->n_prompts) {
-	hout = GetStdHandle(STD_OUTPUT_HANDLE);
-	if (hout == INVALID_HANDLE_VALUE) {
-	    fprintf(stderr, "Cannot get standard output handle\n");
-	    cleanup_exit(1);
-	}
-    }
+    if (console_batch_mode)
+	return 0;
 
-    /*
-     * Preamble.
-     */
-    /* We only print the `name' caption if we have to... */
-    if (p->name_reqd && p->name) {
-	size_t l = strlen(p->name);
-	console_data_untrusted(hout, p->name, l);
-	if (p->name[l-1] != '\n')
-	    console_data_untrusted(hout, "\n", 1);
-    }
-    /* ...but we always print any `instruction'. */
-    if (p->instruction) {
-	size_t l = strlen(p->instruction);
-	console_data_untrusted(hout, p->instruction, l);
-	if (p->instruction[l-1] != '\n')
-	    console_data_untrusted(hout, "\n", 1);
-    }
 
     for (curr_prompt = 0; curr_prompt < p->n_prompts; curr_prompt++) {
-
-	DWORD savemode, newmode;
-        int len;
+		
 	prompt_t *pr = p->prompts[curr_prompt];
-
-	GetConsoleMode(hin, &savemode);
-	newmode = savemode | ENABLE_PROCESSED_INPUT | ENABLE_LINE_INPUT;
-	if (!pr->echo)
-	    newmode &= ~ENABLE_ECHO_INPUT;
-	else
-	    newmode |= ENABLE_ECHO_INPUT;
-	SetConsoleMode(hin, newmode);
-
-	console_data_untrusted(hout, pr->prompt, strlen(pr->prompt));
-
-        len = 0;
-        while (1) {
-            DWORD ret = 0;
-            BOOL r;
-
-            prompt_ensure_result_size(pr, len * 5 / 4 + 512);
-
-            r = ReadFile(hin, pr->result + len, pr->resultsize - len - 1,
-                         &ret, NULL);
-
-            if (!r || ret == 0) {
-                len = -1;
-                break;
-            }
-            len += ret;
-            if (pr->result[len - 1] == '\n') {
-                len--;
-                if (pr->result[len - 1] == '\r')
-                    len--;
-                break;
-            }
-        }
-
-	SetConsoleMode(hin, savemode);
-
-	if (!pr->echo) {
-	    DWORD dummy;
-	    WriteFile(hout, "\r\n", 2, &dummy, NULL);
-	}
-
-        if (len < 0) {
-            return 0;                  /* failure due to read error */
-        }
-
-	pr->result[len] = '\0';
+	if (!DoLoginDialog(pr->result, pr->resultsize-1, pr->prompt))
+	return 0;
     }
 
     return 1; /* success */
+
 }
 
 void frontend_keypress(void *handle)
diff --git a/windows/wingss.c b/windows/wingss.c
index 237b389..83aa8fd 100644
--- a/windows/wingss.c
+++ b/windows/wingss.c
@@ -92,7 +92,11 @@ struct ssh_gss_liblist *ssh_gss_setup(Conf *conf)
 	    ret = RegQueryValueEx(regkey, "InstallDir", NULL,
 				  &type, buffer, &size);
 	    if (ret == ERROR_SUCCESS && type == REG_SZ) {
-		strcat(buffer, "\\bin\\gssapi32.dll");
+#ifdef _WIN64
+		strcat(buffer, "\\bin\\gssapi64.dll");
+#else
+        strcat(buffer, "\\bin\\gssapi32.dll");
+#endif
 		module = LoadLibrary(buffer);
 	    }
 	    sfree(buffer);
diff --git a/windows/winmisc.c b/windows/winmisc.c
index c719c72..44f2ca3 100644
--- a/windows/winmisc.c
+++ b/windows/winmisc.c
@@ -141,7 +141,7 @@ char *get_username(void)
 
 BOOL init_winver(void)
 {
-    ZeroMemory(&osVersion, sizeof(osVersion));
+    SecureZeroMemory(&osVersion, sizeof(osVersion));
     osVersion.dwOSVersionInfoSize = sizeof (OSVERSIONINFO);
     return GetVersionEx ( (OSVERSIONINFO *) &osVersion);
 }
diff --git a/windows/winplink.c b/windows/winplink.c
index 37453bb..9c69b8d 100644
--- a/windows/winplink.c
+++ b/windows/winplink.c
@@ -23,26 +23,33 @@ struct agent_callback {
 
 void fatalbox(char *p, ...)
 {
-    va_list ap;
-    fprintf(stderr, "FATAL ERROR: ");
-    va_start(ap, p);
-    vfprintf(stderr, p, ap);
-    va_end(ap);
-    fputc('\n', stderr);
+	va_list ap;
+	char *stuff, morestuff[100];
+
+	va_start(ap, p);
+	stuff = dupvprintf(p, ap);
+	va_end(ap);
+	sprintf(morestuff, "%.70s Fatal Error", appname);
+	MessageBox(GetParentHwnd(), stuff, morestuff, MB_ICONERROR | MB_OK);
+	sfree(stuff);
     if (logctx) {
         log_free(logctx);
         logctx = NULL;
     }
-    cleanup_exit(1);
+	cleanup_exit(1);
 }
 void modalfatalbox(char *p, ...)
 {
-    va_list ap;
-    fprintf(stderr, "FATAL ERROR: ");
-    va_start(ap, p);
-    vfprintf(stderr, p, ap);
-    va_end(ap);
-    fputc('\n', stderr);
+	va_list ap;
+	char *stuff, morestuff[100];
+
+	va_start(ap, p);
+	stuff = dupvprintf(p, ap);
+	va_end(ap);
+	sprintf(morestuff, "%.70s Fatal Error", appname);
+	MessageBox(GetParentHwnd(), stuff, morestuff,
+		MB_SYSTEMMODAL | MB_ICONERROR | MB_OK);
+	sfree(stuff);
     if (logctx) {
         log_free(logctx);
         logctx = NULL;
@@ -52,11 +59,15 @@ void modalfatalbox(char *p, ...)
 void nonfatal(char *p, ...)
 {
     va_list ap;
-    fprintf(stderr, "ERROR: ");
+    char *stuff, morestuff[100];
+
     va_start(ap, p);
-    vfprintf(stderr, p, ap);
+    stuff = dupvprintf(p, ap);
     va_end(ap);
-    fputc('\n', stderr);
+    sprintf(morestuff, "%.70s Fatal Error", appname);
+    MessageBox(GetParentHwnd(), stuff, morestuff,
+        MB_SYSTEMMODAL | MB_ICONERROR | MB_OK);
+    sfree(stuff);
     if (logctx) {
         log_free(logctx);
         logctx = NULL;
@@ -65,25 +76,32 @@ void nonfatal(char *p, ...)
 void connection_fatal(void *frontend, char *p, ...)
 {
     va_list ap;
-    fprintf(stderr, "FATAL ERROR: ");
-    va_start(ap, p);
-    vfprintf(stderr, p, ap);
-    va_end(ap);
-    fputc('\n', stderr);
+	char *stuff, morestuff[100];
+
+	va_start(ap, p);
+	stuff = dupvprintf(p, ap);
+	va_end(ap);
+	sprintf(morestuff, "%.70s Fatal Error", appname);
+	MessageBox(GetParentHwnd(), stuff, morestuff,
+		MB_SYSTEMMODAL | MB_ICONERROR | MB_OK);
+	sfree(stuff);
     if (logctx) {
         log_free(logctx);
         logctx = NULL;
     }
-    cleanup_exit(1);
+	cleanup_exit(1);
 }
 void cmdline_error(char *p, ...)
 {
-    va_list ap;
-    fprintf(stderr, "plink: ");
-    va_start(ap, p);
-    vfprintf(stderr, p, ap);
-    va_end(ap);
-    fputc('\n', stderr);
+	va_list ap;
+	char *stuff, morestuff[100];
+
+	va_start(ap, p);
+	stuff = dupvprintf(p, ap);
+	va_end(ap);
+	sprintf(morestuff, "%.70s Command Line Error", appname);
+	MessageBox(GetParentHwnd(), stuff, morestuff, MB_ICONERROR | MB_OK);
+	sfree(stuff);
     exit(1);
 }
 
@@ -176,51 +194,52 @@ void agent_schedule_callback(void (*callback)(void *, void *, int),
  */
 static void usage(void)
 {
-    printf("PuTTY Link: command-line connection utility\n");
-    printf("%s\n", ver);
-    printf("Usage: plink [options] [user@]host [command]\n");
-    printf("       (\"host\" can also be a PuTTY saved session name)\n");
-    printf("Options:\n");
-    printf("  -V        print version information and exit\n");
-    printf("  -pgpfp    print PGP key fingerprints and exit\n");
-    printf("  -v        show verbose messages\n");
-    printf("  -load sessname  Load settings from saved session\n");
-    printf("  -ssh -telnet -rlogin -raw -serial\n");
-    printf("            force use of a particular protocol\n");
-    printf("  -P port   connect to specified port\n");
-    printf("  -l user   connect with specified username\n");
-    printf("  -batch    disable all interactive prompts\n");
-    printf("The following options only apply to SSH connections:\n");
-    printf("  -pw passw login with specified password\n");
-    printf("  -D [listen-IP:]listen-port\n");
-    printf("            Dynamic SOCKS-based port forwarding\n");
-    printf("  -L [listen-IP:]listen-port:host:port\n");
-    printf("            Forward local port to remote address\n");
-    printf("  -R [listen-IP:]listen-port:host:port\n");
-    printf("            Forward remote port to local address\n");
-    printf("  -X -x     enable / disable X11 forwarding\n");
-    printf("  -A -a     enable / disable agent forwarding\n");
-    printf("  -t -T     enable / disable pty allocation\n");
-    printf("  -1 -2     force use of particular protocol version\n");
-    printf("  -4 -6     force use of IPv4 or IPv6\n");
-    printf("  -C        enable compression\n");
-    printf("  -i key    private key file for authentication\n");
-    printf("  -noagent  disable use of Pageant\n");
-    printf("  -agent    enable use of Pageant\n");
-    printf("  -m file   read remote command(s) from file\n");
-    printf("  -s        remote command is an SSH subsystem (SSH-2 only)\n");
-    printf("  -N        don't start a shell/command (SSH-2 only)\n");
-    printf("  -nc host:port\n");
-    printf("            open tunnel in place of session (SSH-2 only)\n");
-    printf("  -sercfg configuration-string (e.g. 19200,8,n,1,X)\n");
-    printf("            Specify the serial configuration (serial only)\n");
-    exit(1);
+	char buf[10000];
+	int j = 0;
+
+	j += sprintf(buf+j, "TortoiseGitPlink: command-line connection utility (based on PuTTY Plink)\n");
+    j += sprintf(buf+j, "%s\n", ver);
+    j += sprintf(buf+j, "Usage: tortoisegitplink [options] [user@]host [command]\n");
+    j += sprintf(buf+j, "       (\"host\" can also be a PuTTY saved session name)\n");
+    j += sprintf(buf+j, "Options:\n");
+    j += sprintf(buf+j, "  -V        print version information and exit\n");
+    j += sprintf(buf+j, "  -pgpfp    print PGP key fingerprints and exit\n");
+    j += sprintf(buf+j, "  -v        show verbose messages\n");
+    j += sprintf(buf+j, "  -load sessname  Load settings from saved session\n");
+    j += sprintf(buf+j, "  -ssh -telnet -rlogin -raw\n");
+    j += sprintf(buf+j, "            force use of a particular protocol\n");
+    j += sprintf(buf+j, "  -P port   connect to specified port\n");
+    j += sprintf(buf+j, "  -l user   connect with specified username\n");
+    j += sprintf(buf+j, "The following options only apply to SSH connections:\n");
+    j += sprintf(buf+j, "  -pw passw login with specified password\n");
+    j += sprintf(buf+j, "  -D [listen-IP:]listen-port\n");
+    j += sprintf(buf+j, "            Dynamic SOCKS-based port forwarding\n");
+    j += sprintf(buf+j, "  -L [listen-IP:]listen-port:host:port\n");
+    j += sprintf(buf+j, "            Forward local port to remote address\n");
+    j += sprintf(buf+j, "  -R [listen-IP:]listen-port:host:port\n");
+    j += sprintf(buf+j, "            Forward remote port to local address\n");
+    j += sprintf(buf+j, "  -X -x     enable / disable X11 forwarding\n");
+    j += sprintf(buf+j, "  -A -a     enable / disable agent forwarding\n");
+    j += sprintf(buf+j, "  -t -T     enable / disable pty allocation\n");
+    j += sprintf(buf+j, "  -1 -2     force use of particular protocol version\n");
+    j += sprintf(buf+j, "  -4 -6     force use of IPv4 or IPv6\n");
+    j += sprintf(buf+j, "  -C        enable compression\n");
+    j += sprintf(buf+j, "  -i key    private key file for authentication\n");
+    j += sprintf(buf+j, "  -noagent  disable use of Pageant\n");
+    j += sprintf(buf+j, "  -agent    enable use of Pageant\n");
+    j += sprintf(buf+j, "  -m file   read remote command(s) from file\n");
+    j += sprintf(buf+j, "  -s        remote command is an SSH subsystem (SSH-2 only)\n");
+    j += sprintf(buf+j, "  -N        don't start a shell/command (SSH-2 only)\n");
+    j += sprintf(buf+j, "  -nc host:port\n");
+    j += sprintf(buf+j, "            open tunnel in place of session (SSH-2 only)\n");
+	MessageBox(NULL, buf, "TortoiseGitPlink", MB_ICONINFORMATION);
+	exit(1);
 }
 
 static void version(void)
 {
-    printf("plink: %s\n", ver);
-    exit(1);
+	printf("TortoiseGitPlink: %s\n", ver);
+	exit(1);
 }
 
 char *do_select(SOCKET skt, int startup)
@@ -320,24 +339,11 @@ int main(int argc, char **argv)
     conf = conf_new();
     do_defaults(NULL, conf);
     loaded_session = FALSE;
-    default_protocol = conf_get_int(conf, CONF_protocol);
-    default_port = conf_get_int(conf, CONF_port);
     errors = 0;
-    {
-	/*
-	 * Override the default protocol if PLINK_PROTOCOL is set.
-	 */
-	char *p = getenv("PLINK_PROTOCOL");
-	if (p) {
-	    const Backend *b = backend_from_name(p);
-	    if (b) {
-		default_protocol = b->protocol;
-		default_port = b->default_port;
-		conf_set_int(conf, CONF_protocol, default_protocol);
-		conf_set_int(conf, CONF_port, default_port);
-	    }
-	}
-    }
+    conf_set_int(conf, CONF_protocol, default_protocol);
+    conf_set_int(conf, CONF_port, default_port);
+    conf_set_int(conf, CONF_agentfwd, 0);
+    conf_set_int(conf, CONF_x11_forward, 0);
     while (--argc) {
 	char *p = *++argv;
 	if (*p == '-') {
@@ -345,14 +351,14 @@ int main(int argc, char **argv)
 					    1, conf);
 	    if (ret == -2) {
 		fprintf(stderr,
-			"plink: option \"%s\" requires an argument\n", p);
+			"tortoisegitplink: option \"%s\" requires an argument\n", p);
 		errors = 1;
 	    } else if (ret == 2) {
 		--argc, ++argv;
 	    } else if (ret == 1) {
 		continue;
 	    } else if (!strcmp(p, "-batch")) {
-		console_batch_mode = 1;
+			// ignore and do not print an error message
 	    } else if (!strcmp(p, "-s")) {
 		/* Save status to write to conf later. */
 		use_subsystem = 1;
@@ -364,7 +370,7 @@ int main(int argc, char **argv)
                 pgp_fingerprints();
                 exit(1);
 	    } else {
-		fprintf(stderr, "plink: unknown option \"%s\"\n", p);
+		fprintf(stderr, "tortoisegitplink: unknown option \"%s\"\n", p);
 		errors = 1;
 	    }
 	} else if (*p) {
@@ -761,3 +767,8 @@ int main(int argc, char **argv)
     cleanup_exit(exitcode);
     return 0;			       /* placate compiler warning */
 }
+
+int WinMain(hInstance, hPrevInstance, lpCmdLine, nCmdShow)
+{
+	main(__argc,__argv);
+}
